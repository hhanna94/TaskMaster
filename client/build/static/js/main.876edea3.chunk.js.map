{"version":3,"sources":["components/Nav.jsx","assets/Z-A.svg","assets/A-Z.svg","assets/UpDown.svg","components/AllTasksTable.jsx","views/AllTasks.jsx","views/Admin.jsx","components/Login.jsx","components/TaskForm.jsx","views/CreateTask.jsx","views/EditTask.jsx","components/TaskData.jsx","views/ViewTask.jsx","App.js","reportWebVitals.js","index.js"],"names":["Nav","props","history","useHistory","toggleUpdate","setToggleUpdate","setLoggedInUser","loggedInUser","className","to","admin","_id","onClick","axios","get","withCredentials","then","res","push","catch","err","console","log","AllTasksTable","useState","tableTaskData","setTableTaskData","filteredTasks","toggleReload","setToggleReload","currentPage","setCurrentPage","tasksPerPage","setTasksPerPage","column","direction","sortCriteria","setSortCriteria","numPages","pages","Math","ceil","length","useEffect","changePage","page","_next","document","getElementById","_prev","page_span","tableStart","tableEnd","tableData","priorityImg","statusImg","src","UpDown","AZ","sort","a","b","ZA","sortList","slice","innerHTML","style","visibility","id","e","width","height","colSpan","map","task","i","taskName","Date","dueDate","toLocaleDateString","timeZone","priority","status","assignTo","firstName","lastName","completedTask","put","completeTask","disabled","display","onChange","parseInt","target","value","name","num","AllTasks","today","users","priorities","setFilteredTasks","loaded","setLoaded","filter","setFilter","data","handleFilterUpdate","htmlFor","user","type","Admin","departments","defaultUserInfo","department","email","password","confirmPassword","userFormInfo","setUserFormInfo","errors","setErrors","setUsers","mode","setMode","setSort","updateUserForm","userEmails","emails","forEach","getUserEmails","minWidth","departmentImg","switchToEditMode","delete","onSubmit","preventDefault","post","userExists","response","message","checked","Login","loginInfo","setLoginInfo","error","setError","handleChange","invalidAttempt","msg","TaskForm","onSubmitProp","defaultTask","parent","taskInfo","setTaskInfo","updateForm","now","userName","description","time","editor","CreateTask","createdBy","goBack","EditTask","useParams","setTask","TaskData","toLocaleTimeString","hour","minute","ViewTask","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.876edea3.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React from 'react';\r\nimport {Link, useHistory} from 'react-router-dom'\r\n\r\nconst Nav = props => {\r\n    const history = useHistory();\r\n    const {toggleUpdate, setToggleUpdate, setLoggedInUser, loggedInUser} = props\r\n\r\n    // When a user logs out, toggle an update of the App.js' useEffect since there will no longer be a user logged in, then redirect them to the login page.\r\n    const logout = () => {\r\n        axios.get(\"http://localhost:8000/api/users/logout\", {withCredentials: true})\r\n            .then(res => {\r\n                setToggleUpdate(!toggleUpdate)\r\n                setLoggedInUser({})\r\n                history.push(\"/\")\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div className=\"container d-flex justify-content-between align-items-center\">\r\n            <h1 className=\"align-self-end\">TaskMaster</h1>\r\n            <ul className=\"nav\">\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/home\">All Tasks</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/tasks/new\">Create Task</Link>\r\n                </li>\r\n                {/* If the user is an admin, then show the admin link. */}\r\n                {loggedInUser.admin?<li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/admin\">Admin</Link>\r\n                </li> : \"\"}\r\n\r\n                {/* If the user is logged in, show a logout button. If they aren't logged in, show a login button. */}\r\n                {loggedInUser._id? <button onClick={logout} className=\"ms-4 red-button align-self-center\">Logout</button>:<Link to=\"/\" className=\"ms-4 button blue-button align-self-center\">Login</Link>}\r\n                \r\n            </ul>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default Nav;","export default __webpack_public_path__ + \"static/media/Z-A.a5761f6f.svg\";","export default __webpack_public_path__ + \"static/media/A-Z.bf0629e2.svg\";","export default __webpack_public_path__ + \"static/media/UpDown.160842ca.svg\";","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios'\r\nimport ZA from \"../assets/Z-A.svg\"\r\nimport AZ from \"../assets/A-Z.svg\"\r\nimport UpDown from \"../assets/UpDown.svg\"\r\n\r\nconst AllTasksTable = props => {\r\n    const [tableTaskData, setTableTaskData] = useState([])\r\n    const { filteredTasks, toggleReload, setToggleReload } = props\r\n\r\n    // States used for pagination and sorting.\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [tasksPerPage, setTasksPerPage] = useState(5)\r\n    const [sortCriteria, setSortCriteria] = useState({column: \"priority\", direction: true})\r\n\r\n    // Options for a user to select how many tasks they want on the page. \r\n    const tasksPerPageOptions = [5, 10, 25, 50]\r\n\r\n    // Function to sort the list, triggered by clicking on the arrow icons in the table.\r\n    const sortList = () => {\r\n        let column = sortCriteria.column;\r\n        let direction = sortCriteria.direction;\r\n        let priorityImg = document.getElementById(\"priorityImg\")\r\n        let statusImg = document.getElementById(\"statusImg\")\r\n\r\n        // If the column clicked on is the status icon, then the priority icon should just be an up and down arrow to indicate that the user is not sorting by the priority column, and vice versa.\r\n        column === \"status\" ? priorityImg.src = UpDown : statusImg.src = UpDown\r\n\r\n        // If the direction is false, then sort the tasks by status or priority (depending on which is clicked) in descending order, and change the image to reflect that it is in descending order.\r\n        if (!direction) {\r\n            column === \"status\" ? statusImg.src = ZA : priorityImg.src = ZA\r\n            return [...filteredTasks].sort( (a,b) => a[column] < b[column] ? 1 : -1)\r\n        } \r\n        // If the direction is true, then sort the tasks by status or priority (depending on which is clicked) in ascending order, and change the image to reflect that it is in ascending order.\r\n        else {\r\n            column === \"status\" ? statusImg.src = AZ : priorityImg.src = AZ\r\n            return [...filteredTasks].sort( (a,b) => a[column] > b[column] ? 1 : -1)\r\n        }\r\n    }\r\n\r\n    // Function that returns how many pages there will be based on how many tasks are in the filteredTask list divided by the tasksPerPage that has been selected.\r\n    function numPages() {\r\n        let pages = Math.ceil(filteredTasks.length / tasksPerPage)\r\n        return pages > 0 ? pages : 1;\r\n    }\r\n\r\n    // Function used when selecting the previous page button. Checks to make sure that the user isn't on the first page, since there is no previous page if the user is on the first page. It will set the new page to be the previous page, then use the changePage function to change what tasks are displayed.\r\n    const prevPage = () => {\r\n        if (currentPage > 1) {\r\n            let newPage = currentPage - 1\r\n            changePage(newPage);\r\n        }\r\n    }\r\n\r\n    // Function used when selecting the next page button. Checks to make sure that the user isn't on the last page, since there is no next page if the user is on the last page. It will set the new page to be the next page, then use the changePage function to change what tasks are displayed.\r\n    const nextPage = () => {\r\n        if (currentPage < numPages()) {\r\n            let newPage = currentPage + 1\r\n            changePage(newPage)\r\n        }\r\n    }\r\n\r\n    // This is used on loading of the table component to change the page to whatever the currentPage is, which is page 1 by default. This refreshes if you change the tasksPerPage, change the sort, or change any of the filters on the parent view.\r\n    useEffect(() => {\r\n        changePage(currentPage)\r\n    }, [tasksPerPage, toggleReload, sortCriteria])\r\n\r\n    // Function used to change which tasks are displayed based on the page.\r\n    const changePage = (page) => {\r\n        var _next = document.getElementById(\"_next\");\r\n        var _prev = document.getElementById(\"_prev\");\r\n        var page_span = document.getElementById(\"page\")\r\n\r\n        // If the user manages to get to a page that doesn't exist (either too high or too low), then set the page to either the first page or the last page.\r\n        if (page < 1) {\r\n            page = 1;\r\n        }\r\n        else if (page > numPages()) {\r\n            page = numPages();\r\n        }\r\n\r\n        // Logic to set where the display should start and end based on how many tasks should be displayed per page, then sets the state to display those tasks. This starts off sorted using the default sort state.\r\n        let tableStart = (page - 1) * tasksPerPage\r\n        let tableEnd = tableStart + tasksPerPage\r\n        let tableData = sortList().slice(tableStart, tableEnd)\r\n        setTableTaskData(tableData)\r\n\r\n        // Changes the text for what page # the user is on.\r\n        page_span.innerHTML = page;\r\n\r\n        // If the user is on the first page, hide the previous style button.\r\n        page === 1 ? _prev.style.visibility = \"hidden\" : _prev.style.visibility = \"visible\"\r\n        // If the user is on the last page, hide the next style button.\r\n        page === numPages() ? _next.style.visibility = \"hidden\" : _next.style.visibility = \"visible\"\r\n\r\n        // Set the current page state to be the new page.\r\n        setCurrentPage(page);\r\n    }\r\n\r\n    // When a user completes a task in the table, then set the task's status as completed, then call on the API to update the task in the database. Then, trigger a reload so that it updates in the table (if it should be visible based on the filter).\r\n    const completeTask = task => {\r\n        let completedTask = {...task, status: \"Completed\"}\r\n        axios.put(`http://localhost:8000/api/tasks/${task._id}`, completedTask)\r\n            .then(res => setToggleReload(!toggleReload))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <p className=\"me-4 mb-1 text-end\"><strong>Total Tasks:</strong> {filteredTasks.length}</p>\r\n            <table className=\"table table-bordered border-dark text-center align-middle\">\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"col-3\" >Task Name </th>\r\n                        <th className=\"col-1\">Due Date</th>\r\n                        <th className=\"col-2\">Priority <img id=\"priorityImg\" className=\"ms-2\" onClick={ e => {setSortCriteria({column: \"priority\", direction: !sortCriteria.direction})}} style={{width: \"1em\", height: \"1em\"}} src={AZ} /></th>\r\n                        <th className=\"col-2\">Status <img id=\"statusImg\" className=\"ms-2\" onClick={ e => {setSortCriteria({column: \"status\", direction: !sortCriteria.direction})}} style={{width: \"1em\", height: \"1em\"}} src={UpDown} /></th>\r\n                        <th className=\"col-2\">Assigned To</th>\r\n                        <th className=\"col-2\" colSpan=\"2\">Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tableTaskData.map((task, i) => {\r\n                        return (\r\n                            <tr key={i}>\r\n                                        <td><Link to={`/tasks/${task._id}`}>{task.taskName}</Link></td>\r\n                                        <td>{new Date(task.dueDate).toLocaleDateString(\"en-US\", { timeZone: 'UTC' })}</td>\r\n                                        <td>{task.priority}</td>\r\n                                        <td>{task.status}</td>\r\n                                        <td>{task.assignTo.firstName} {task.assignTo.lastName}</td>\r\n                                        <td className=\"col-1\">{<Link className=\"button blue-button px-4 py-1\" to={`/tasks/${task._id}/edit`}>Edit</Link>}</td>\r\n                                        <td>{ task.status !== \"Completed\" ? <button onClick={e => {completeTask(task)}} className=\"red-button\">Complete</button> : <button className=\"button btn-secondary\" disabled>Complete</button>}</td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                    {!tableTaskData.length>0 ? <tr><td colSpan=\"6\">No results found, trying changing your filters.</td></tr> : <tr style={{display:\"none\"}}></tr>}\r\n                </tbody>\r\n                <tfoot>\r\n                </tfoot>\r\n            </table>\r\n            <div className=\"d-flex align-items-center justify-content-between\">\r\n                <div className=\"d-flex gap-3 align-items-center\">\r\n                    <button onClick={prevPage} id=\"_prev\" className=\" red-button\">Previous</button>\r\n                    <label>Current Page: <span id=\"page\"></span></label>\r\n                    <button id=\"_next\" onClick={nextPage} className=\" blue-button\">Next</button>\r\n                </div>\r\n                <div>\r\n                    <label className=\"me-3\">Rows per Page: </label>\r\n                    <select onChange={e => { setTasksPerPage(parseInt(e.target.value)) }} name=\"taskPerPageSelect\" id=\"taskPerPageSelect\" className=\"py-0\">\r\n                        {tasksPerPageOptions.map((num, i) => {\r\n                            return (\r\n                                <option key={i} value={num}>{num}</option>\r\n                            )\r\n                        })}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default AllTasksTable;","import axios from 'axios';\r\nimport React, { useState, useEffect } from 'react';\r\nimport AllTasksTable from '../components/AllTasksTable';\r\n\r\n\r\n\r\nconst AllTasks = props => {\r\n    const today = new Date().toLocaleDateString('en-CA', {timeZone: 'EST'})\r\n    const { users, status, priorities, loggedInUser } = props\r\n    const [filteredTasks, setFilteredTasks] = useState([])\r\n    const [toggleReload, setToggleReload] = useState(false)\r\n    const [loaded, setLoaded] = useState(false)\r\n    // Sets the default filter state to be as follows.\r\n    const [filter, setFilter] = useState({\r\n        assignTo: loggedInUser._id,\r\n        priority: \"All\",\r\n        dueDate: today,\r\n        status: \"In Progress\"\r\n    })\r\n\r\n    // Upon loading this view, call on the API to gett a list of filtered tasks based on the given criteria from the filter state. This will get re-run any time there is an update to the filters or if a task has been completed to update the list accordingly.\r\n    useEffect(() => {\r\n        // The tasks table must be unmounted before remounting it after the API call is successful.\r\n        setLoaded(false)\r\n        axios.get(`http://localhost:8000/api/tasks/${filter.priority}/${filter.dueDate}/${filter.status}/${filter.assignTo}`)\r\n            .then(res => {\r\n                setFilteredTasks(res.data)\r\n                setLoaded(true)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [filter, toggleReload])\r\n\r\n    // Update the filter state anytime someone changes one of the filters.\r\n    const handleFilterUpdate = e => {\r\n        setFilter({...filter, [e.target.name]: e.target.value})\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3 className=\"text-center fw-bold\">All Tasks</h3>\r\n            <div className=\"container w-75\">\r\n                <h5>Filters:</h5>\r\n                <div className=\"ps-5 d-flex flex-wrap justify-content-between align-items-start\">\r\n                    <div className=\"d-flex align-items-center col-6\">\r\n                        <label className=\"me-2 col-3\" htmlFor=\"assignTo\">Assign To: </label>\r\n                        <select onChange={handleFilterUpdate} className=\"form-select py-0 w-50\" name=\"assignTo\" id=\"assignTo\" value={filter.assignTo}>\r\n                            <option value=\"All\">All</option>\r\n                            {users.map((user, i) => {\r\n                                return (\r\n                                    <option key={i} value={user._id}>{user.firstName} {user.lastName}</option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center col-6\">\r\n                        <label className=\"me-2 col-2\" htmlFor=\"priority\">Priority: </label>\r\n                        <select onChange={handleFilterUpdate} className=\"form-select py-0 w-50\" name=\"priority\" id=\"priority\" value={filter.priority}>\r\n                            <option value=\"All\">All</option>\r\n                            {priorities.map( (priority, i) => {\r\n                            return (\r\n                                <option key={i} value={priority}>{priority}</option>\r\n                            )\r\n                        })}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center col-6 mt-3\">\r\n                        <label className=\"me-2 col-3\" htmlFor=\"dueDate\">Due Date:</label>\r\n                        <input onChange={handleFilterUpdate} className=\"form-control py-0 w-50\" type=\"date\" name=\"dueDate\" id=\"dueDate\" value={filter.dueDate}/>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center col-6 mt-3\">\r\n                        <label className=\"me-2 col-2\" htmlFor=\"status\">Status: </label>\r\n                        <select onChange={handleFilterUpdate} className=\"form-select py-0 w-50\" name=\"status\" id=\"status\" value={filter.status}>\r\n                            {status.map((status, i) => {\r\n                                return (\r\n                                    <option key={i} value={status}>{status}</option>\r\n                                )\r\n                            })}\r\n                            <option value=\"All\">All</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {loaded && <AllTasksTable toggleReload={toggleReload} setToggleReload={setToggleReload} filteredTasks={filteredTasks} />}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default AllTasks;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios'\r\nimport ZA from \"../assets/Z-A.svg\"\r\nimport AZ from \"../assets/A-Z.svg\"\r\n\r\nconst Admin = props => {\r\n    const { departments, toggleUpdate, setToggleUpdate } = props\r\n    const defaultUserInfo = { firstName: \"\", lastName: \"\", department: \"\", email: \" \", password: \"\", confirmPassword: \"\", admin: false }\r\n    const [userFormInfo, setUserFormInfo] = useState(defaultUserInfo)\r\n    const [toggleReload, setToggleReload] = useState(false)\r\n    const [errors, setErrors] = useState({})\r\n    const [users, setUsers] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n    const [mode, setMode] = useState(\"create\")\r\n    const [sort, setSort] = useState(true)\r\n\r\n    // Logic to allow the user to sort employees by department.\r\n    const sortList = () => {\r\n        let departmentImg = document.getElementById(\"departmentImg\")\r\n        if (sort) {\r\n            departmentImg.src = AZ\r\n            return [...users].sort( (a,b) => a.department > b.department ? 1 : -1)\r\n        } else {\r\n            departmentImg.src = ZA\r\n            return [...users].sort( (a,b) => a.department < b.department ? 1 : -1)\r\n        }\r\n    }\r\n\r\n    // Updates the user form state when a user makes changes to the form.\r\n    const updateUserForm = (e) => {\r\n        let value\r\n        // Checks whether the input type is a checkbox. If it is, it needs to be set to be the boolean opposite of what it was. All other inputs are handled the same.\r\n        if (e.target.type === \"checkbox\") {\r\n            value = !userFormInfo.admin;\r\n        } else {\r\n            value = e.target.value;\r\n        }\r\n        setUserFormInfo({...userFormInfo, [e.target.name]: value})\r\n    }\r\n\r\n    // Gets a list of user emails if the mode is edit. This is used to add a front-end validation for if the email has already been used.\r\n    const getUserEmails = () => {\r\n        if (mode === \"create\") {\r\n            let emails = {}\r\n            users.forEach(function (user) {\r\n                emails[user.email] = 1\r\n            })\r\n            return emails\r\n        }\r\n    }\r\n    let userEmails = getUserEmails();\r\n\r\n    // Switches the forms mode to edit mode if the user clicks edit in the table, with default form information of the user they want to edit.\r\n    const switchToEditMode = user => {\r\n        setMode(\"edit\")\r\n        setUserFormInfo(user)\r\n        setErrors({})\r\n    }\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // If the user is in create mode, call on the API to create a user. If it passes the back-end validations, but returns that the user already exists, set the error to be displayed. If it passes all other back-end validations, reset everything so the form is clear and the users table gets updated.\r\n        if (mode === \"create\") {\r\n            axios.post('http://localhost:8000/api/users', userFormInfo)\r\n                .then(res => {\r\n                    console.log(res)\r\n                    if (res.data.userExists) {\r\n                        setErrors(res.data)\r\n                    } else {\r\n                        setErrors({})\r\n                        setUserFormInfo(defaultUserInfo)\r\n                        setToggleReload(!toggleReload)\r\n                    }\r\n                })\r\n                // If the API call does not pass back-end validations, set the error state so that the user knows what they did wrong.\r\n                .catch(err => {\r\n                    setErrors(err.response.data.errors)\r\n                })\r\n        }\r\n        // If the user is in edit mode, call on the API to edit the user. If it passes all back-end validations, reset everything so the form is back to create mode and is clear, and the users table gets updated.\r\n        else {\r\n            axios.put(`http://localhost:8000/api/users/${userFormInfo._id}`, userFormInfo)\r\n                .then(res => {\r\n                    setErrors({})\r\n                    setUserFormInfo(defaultUserInfo)\r\n                    setToggleReload(!toggleReload)\r\n                    setMode(\"create\")\r\n                })\r\n                // If the API call does not pass back-end validations, set the error state so that the user knows what they did wrong.\r\n                .catch(err => {\r\n                    setErrors(err.response.data.errors)\r\n                })\r\n        }\r\n        // Reload App, not just Admin page since there has been a change to users that needs to be reflected in other parts of the app.\r\n        setToggleUpdate(!toggleUpdate)\r\n    }\r\n\r\n    // Delete the user when an admin clicks the delete button.\r\n    const deleteUser = id => {\r\n        axios.delete(`http://localhost:8000/api/users/${id}`)\r\n            .then(res => setToggleReload(!toggleReload))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    // Upon loading the page (and forcing the trigger through updating toggleReload), get a list of all users.\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/users')\r\n            .then(res => {\r\n                setUsers(res.data)\r\n                setLoaded(true)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [toggleReload])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3 className=\"mb-2\">Admin</h3>\r\n            <div className=\"d-flex justify-content-around\">\r\n                <div>\r\n                    <h4 className=\"text-center\">Users</h4>\r\n                    <table style={{ minWidth: \"30vw\" }} className=\"mt-4 table table-striped table-bordered border-dark text-center align-middle\">\r\n                        <thead>\r\n                            <tr>\r\n                                <td className=\"col-4\">Name</td>\r\n                                <td className=\"col-4\">Department <img id=\"departmentImg\" className=\"ms-2\" onClick={e => { setSort(!sort) }} style={{ width: \"1em\", height: \"1em\" }} src={AZ} /></td>\r\n                                <td className=\"col-4\" colSpan=\"2\">Actions</td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {loaded && sortList().map((user, i) => {\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        <td>{user.firstName} {user.lastName}</td>\r\n                                        <td>{user.department}</td>\r\n                                        <td><button onClick={() => { switchToEditMode(user) }} className=\"button blue-button\">Edit</button></td>\r\n                                        <td><button className=\"button red-button\" onClick={() => { deleteUser(user._id) }}>Delete</button></td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div style={{ width: \"22vw\" }}>\r\n                    {mode === \"create\" ? <h4 className=\"text-center\">Create a User</h4> : <h4 className=\"text-center\">Edit User</h4>}\r\n                    <form onSubmit={handleSubmit} className=\"mt-4\">\r\n                        <div className=\"formDiv\">\r\n                            <label htmlFor=\"firstName\" className=\"col-5 col-form-label\">First Name: </label>\r\n                            <input onChange={updateUserForm} type=\"text\" className=\"form-control\" id=\"firstName\" name=\"firstName\" value={userFormInfo.firstName} />\r\n                        </div>\r\n                        {errors.firstName ? <p className=\"text-danger\">*{errors.firstName.message} </p> : \"\"}\r\n                        <div className=\"formDiv\">\r\n                            <label htmlFor=\"lastName\" className=\"col-5 col-form-label\">Last Name: </label>\r\n                            <input onChange={updateUserForm} type=\"text\" className=\"form-control\" id=\"lastName\" name=\"lastName\" value={userFormInfo.lastName} />\r\n                        </div>\r\n                        {errors.lastName ? <p className=\"text-danger\">*{errors.lastName.message} </p> : \"\"}\r\n                        <div className=\"formDiv\">\r\n                            <label htmlFor=\"department\" className=\"col-5 col-form-label\">Department: </label>\r\n                            <select onChange={updateUserForm} name=\"department\" className=\"form-select\" value={userFormInfo.department}>\r\n                                <option value=\"\">---</option>\r\n                                {departments.map((department, i) => {\r\n                                    return (\r\n                                        <option key={i} value={department}>{department}</option>\r\n                                    )\r\n                                })}\r\n                            </select>\r\n                        </div>\r\n                        {errors.department ? <p className=\"text-danger\">*{errors.department.message} </p> : \"\"}\r\n                        <div className=\"formDiv\">\r\n                            <label htmlFor=\"email\" className=\"col-5 col-form-label\">Email: </label>\r\n                            <input onChange={updateUserForm} type=\"email\" name=\"email\" id=\"email\" className=\"form-control\" value={userFormInfo.email} />\r\n                        </div>\r\n                        {errors.email ? <p className=\"text-danger\">*{errors.email.message} </p> : \"\"}\r\n                        {mode === \"create\" && userEmails[userFormInfo.email] ? <p className=\"text-danger\">*Email is already in use. </p> : \"\"}\r\n                        {errors.userExists ? <p className=\"text-danger\">*{errors.userExists} </p> : \"\"}\r\n                        {mode === \"create\" ? <div className=\"formDiv\">\r\n                            <label htmlFor=\"password\" className=\"col-5 col-form-label\">Password: </label>\r\n                            <input onChange={updateUserForm} type=\"password\" name=\"password\" id=\"password\" className=\"form-control\" value={userFormInfo.password} />\r\n                        </div> : \"\"}\r\n                        {errors.password ? <p className=\"text-danger\">*{errors.password.message} </p> : \"\"}\r\n                        {mode === \"create\" ? <div className=\"formDiv\">\r\n                            <label htmlFor=\"confirmPassword\" className=\"col-5 col-form-label\">Confirm Password: </label>\r\n                            <input onChange={updateUserForm} type=\"password\" name=\"confirmPassword\" id=\"confirmPassword\" className=\"form-control\" value={userFormInfo.confirmPassword} />\r\n                        </div> : \"\"}\r\n                        {/* Front end validation to make sure the password and confirm password fields match. */}\r\n                        {mode === \"create\" && userFormInfo.password !== userFormInfo.confirmPassword && userFormInfo.confirmPassword.length > 0 ? <p className=\"text-danger\">*Passwords must match.</p> : \"\"}\r\n                        <div className=\"formDiv justify-content-between\">\r\n                            <div>\r\n                                <label htmlFor=\"admin\" className=\"col-form-label me-2\">Admin?</label>\r\n                                <input onChange={updateUserForm} type=\"checkbox\" name=\"admin\" id=\"admin\" checked={userFormInfo.admin} />\r\n                            </div>\r\n                            {mode === \"create\" ? <input className=\"button blue-button\" type=\"submit\" value=\"Create User\" /> : <input className=\"button blue-button\" type=\"submit\" value=\"Edit User\" />}\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Admin;","import React, { useState } from 'react';\r\nimport axios from 'axios'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst Login = props => {\r\n    const [loginInfo, setLoginInfo] = useState({ email: \"\", password: \"\" })\r\n    const [error, setError] = useState({})\r\n    const history = useHistory();\r\n    const {toggleUpdate, setToggleUpdate} = props\r\n\r\n    // When a user types in the login form, update the form information.\r\n    const handleChange = e => {\r\n        setLoginInfo({...loginInfo, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    // When a user tries to login, call on the API to validate their credentials. If the credentials the user typed in match what is in the database, then force an update of the useEffect on the App.js to pull in the logged in user's information, then redirect them to the home page.\r\n    const login = (e) => {\r\n        e.preventDefault();\r\n        axios.post(\"http://localhost:8000/api/login\", loginInfo, { withCredentials: true })\r\n            .then(res => {\r\n                if (res.data.msg === \"success!\") {\r\n                    setToggleUpdate(!toggleUpdate)\r\n                    history.push(\"/home\")\r\n                } else {\r\n                    setError(res.data)\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div className=\"container w-50\">\r\n            <h3>Login</h3>\r\n            {/* Display an error message if the user typed invalid credentials. */}\r\n            {error.invalidAttempt ? <p className=\"text-danger text-center\">{error.invalidAttempt}</p> : \"\"}\r\n            <form onSubmit={login} className=\"mt-4 container w-25\">\r\n                <div className=\"d-flex justify-content-center mb-3\">\r\n                    <label htmlFor=\"email\" className=\"col-sm-5 col-form-label\">Email: </label>\r\n                    <input onChange={handleChange} type=\"text\" className=\"form-control col-sm-7\" id=\"email\" name=\"email\" value={loginInfo.email} />\r\n                </div>\r\n                <div className=\"d-flex justify-content-center mb-3 align-items-center\">\r\n                    <label htmlFor=\"password\" className=\"col-sm-5 col-form-label\">Password: </label>\r\n                    <input onChange={handleChange} type=\"password\" className=\"form-control col-sm-7\" id=\"password\" name=\"password\" value={loginInfo.password} />\r\n                </div>\r\n                <div className=\"d-flex justify-content-center\"><input className=\"button blue-button\" type=\"submit\" value=\"Login\" /></div>\r\n            </form>\r\n            <div className=\"mt-5\">\r\n                <p>Thank you so much for taking the time to view my project! This web app does require you to log in to proceed.</p>\r\n                <p>For admin, use email heather@hanna.com with password Password123!. For a regular user, use rosie@hanna.com with password Password123!.</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Login;","import React, { useState } from 'react';\r\n\r\nconst TaskForm = props => {\r\n    const { onSubmitProp, errors, defaultTask, parent, users, status, priorities, loggedInUser } = props\r\n    const [taskInfo, setTaskInfo] = useState(defaultTask)\r\n\r\n    // When the user types in the form, update the state.\r\n    const updateForm = e => {\r\n        setTaskInfo({ ...taskInfo, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    // When the user submits the form, before using the parent create/edit logic, add the first instance of task history which contains whatever has been typed in the description, the current time, and whoever made the edit (whoever is logged in). Then, use the parent create/edit logic to create or update the task.\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        let history = taskInfo.history\r\n        let now = new Date()\r\n        let userName = `${loggedInUser.firstName} ${loggedInUser.lastName}`\r\n        history.push({\r\n            description: taskInfo.description,\r\n            time: now,\r\n            editor: userName\r\n        })\r\n        onSubmitProp(taskInfo)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container w-25\">\r\n            <form onSubmit={handleSubmit} className=\"mt-4 container\">\r\n                <div className=\"d-flex justify-content-center mb-3 \">\r\n                    <label htmlFor=\"taskName\" className=\"col-4 col-form-label\">Task Name: </label>\r\n                    <input onChange={updateForm} type=\"text\" className=\"form-control\" id=\"taskName\" name=\"taskName\" value={taskInfo.taskName} />\r\n                </div>\r\n                {errors.taskName ? <p className=\"text-danger\">*{errors.taskName.message}</p> : \"\"}\r\n                <div className=\"d-flex justify-content-center mb-3 align-items-center\">\r\n                    <label htmlFor=\"description\" className=\"col-sm-4 col-form-label\">Comment: </label>\r\n                    <textarea onChange={updateForm} name=\"description\" id=\"description\" className=\"form-control\" value={taskInfo.description}></textarea>\r\n                </div>\r\n                {errors.description ? <p className=\"text-danger\">*{errors.description.message}</p> : \"\"}\r\n                <div className=\"d-flex justify-content-center mb-3\">\r\n                    <label htmlFor=\"dueDate\" className=\"col-sm-4 col-form-label\">Due Date: </label>\r\n                    <input onChange={updateForm} type=\"date\" className=\"form-control\" id=\"dueDate\" name=\"dueDate\" value={new Date(taskInfo.dueDate).toLocaleDateString('en-CA', { timeZone: \"UTC\" })} />\r\n                </div>\r\n                {errors.dueDate ? <p className=\"text-danger\">*{errors.dueDate.message}</p> : \"\"}\r\n                <div className=\"d-flex justify-content-center mb-3\">\r\n                    <label htmlFor=\"priority\" className=\"col-sm-4 col-form-label\">Priority: </label>\r\n                    <select onChange={updateForm} name=\"priority\" id=\"priority\" className=\"form-select\" value={taskInfo.priority}>\r\n                        <option value=\"\">---</option>\r\n                        {priorities.map((priority, i) => {\r\n                            return (\r\n                                <option key={i} value={priority}>{priority}</option>\r\n                            )\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                {errors.priority ? <p className=\"text-danger\">*{errors.priority.message}</p> : \"\"}\r\n                <div className=\"d-flex justify-content-center mb-3\">\r\n                    <label htmlFor=\"assignTo\" className=\"col-sm-4 col-form-label\">Assign To: </label>\r\n                    <select onChange={updateForm} name=\"assignTo\" id=\"assignTo\" className=\"form-select\" value={taskInfo.assignTo._id}>\r\n                        <option value=\"\">---</option>\r\n                        {users.map((user, i) => {\r\n                            return (\r\n                                <option key={i} value={user._id}>{user.firstName} {user.lastName}</option>\r\n                            )\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                {errors.assignTo ? <p className=\"text-danger\">*Must choose a user to assign the task to.</p> : \"\"}\r\n                {/* By default, the status of the task will be In Progress. The user should only see the field to edit the status if the form is in edit mode. */}\r\n                {parent === \"edit\" ?\r\n\r\n                    <div className=\"d-flex justify-content-center mb-3\">\r\n                        <label htmlFor=\"status\" className=\"col-sm-4 col-form-label\">Status: </label>\r\n                        <select onChange={updateForm} name=\"status\" id=\"status\" className=\"form-select\" value={taskInfo.status}>\r\n                            {status.map((status, i) => {\r\n                                return (\r\n                                    <option key={i} value={status}>{status}</option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n\r\n                    : \"\"}\r\n                {/* Change what text displays on the button depending on which mode the form is in. */}\r\n                <div className=\"d-flex justify-content-center mb-3\"><input className=\"button blue-button\" type=\"submit\" value={parent === \"edit\" ? \"Edit Task\" : \"Create Task\"} /></div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskForm;","import axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport TaskForm from '../components/TaskForm';\r\n\r\nconst CreateTask = props => {\r\n    let today = new Date().toLocaleDateString('en-CA', { timeZone: 'EST' });\r\n    const { loggedInUser, users, status, priorities } = props\r\n    const [errors, setErrors] = useState({})\r\n    const history = useHistory();\r\n\r\n    // Sets the default task information to be passed to the form.\r\n    const defaultTask = { taskName: \"\", description: \"\", dueDate: today, priority: \"\", assignTo: \"\", createdBy: loggedInUser._id, status: \"In Progress\", history: [] }\r\n\r\n    // Sets the mode for the form\r\n    const parent = \"create\"\r\n\r\n    // Logic for what should happen when the user submits the form in create mode. It should call on the API to add the task to the database, then go back to the last page the user was on. If back-end validations fail, then set the array of errors to be displayed on the form so the user knows what they did wrong.\r\n    const createTask = task => {\r\n        axios.post('http://localhost:8000/api/tasks', task)\r\n            .then(res => history.goBack())\r\n            .catch(err => setErrors(err.response.data.errors))\r\n    }\r\n\r\nreturn (\r\n    <div>\r\n        <h3>Create a New Task</h3>\r\n        <TaskForm loggedInUser={loggedInUser} priorities={priorities} status={status} users={users} onSubmitProp={createTask} errors={errors} defaultTask={defaultTask} parent={parent} />\r\n    </div>\r\n);\r\n};\r\n\r\n\r\nexport default CreateTask;","import React, {useEffect, useState} from 'react';\r\nimport TaskForm from '../components/TaskForm';\r\nimport {useParams} from 'react-router'\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios'\r\n\r\nconst EditTask = props => {\r\n    // Pulls the task ID from the URL to be used in the useEffect.\r\n    const {id} = useParams();\r\n    const {users, status, priorities, loggedInUser} = props\r\n    const [loaded, setLoaded] = useState(false)\r\n    const [errors, setErrors] = useState({})\r\n    const history = useHistory()\r\n\r\n    // Sets the default task information to be passed to the form. This is set during the useEffect.\r\n    const [task, setTask] = useState({})\r\n\r\n    // Sets the mode for the form\r\n    const parent = \"edit\"\r\n\r\n    // useEffect to get and set all data for the current task. If the task is successfully retrieved, then the task form can be loaded.\r\n    useEffect( () => {\r\n        axios.get(`http://localhost:8000/api/tasks/${id}`)\r\n            .then(res => {\r\n                setTask(res.data[0])\r\n                setLoaded(true)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    // Logic for what should happen when the user submits the form in edit mode. It should call on the API to update the task in the databse, then go back to the last page the user was on. If back-end validations fail, then set the array of errors to be displayed on the form so the user knows what they did wrong.\r\n    const updateTask = task => {\r\n        axios.put(`http://localhost:8000/api/tasks/${id}`, task)\r\n            .then(res => history.goBack())\r\n            .catch(err => setErrors(err.response.data.errors))\r\n    }\r\n        \r\n    return (\r\n        <div>\r\n            <h3>Edit Task</h3>\r\n            {loaded && <TaskForm loggedInUser={loggedInUser} priorities={priorities} status={status} users={users} onSubmitProp={updateTask} errors={errors} defaultTask={task} parent={parent}/> }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default EditTask;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TaskData = props => {\r\n    const { task } = props\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex justify-content-between gap-3\">\r\n                <div className=\"mt-3 w-50 border-end pe-3\">\r\n                    <h3>Task Details</h3>\r\n                    <div className=\"d-flex align-items-center mt-4\">\r\n                        <p className=\"col-3\"><strong>Title: </strong></p>\r\n                        <p>{task.taskName}</p>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <p className=\"col-3\"><strong>Assigned To: </strong></p>\r\n                        <p className=\"\">{task.assignTo.firstName} {task.assignTo.lastName}</p>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <p className=\"col-3\"><strong>Due Date: </strong></p>\r\n                        <p className=\"\">{new Date(task.dueDate).toLocaleDateString('en-US', { timeZone: 'UTC' })}</p>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <p className=\"col-3\"><strong>Priority: </strong></p>\r\n                        <p className=\"\">{task.priority}</p>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <p className=\"col-3\"><strong>Status: </strong></p>\r\n                        <p className=\"\">{task.status}</p>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <p className=\"col-3\"><strong>Comment: </strong></p>\r\n                        <p className=\"col-9\">{task.description}</p>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <p className=\"col-3\"><strong>Created By: </strong></p>\r\n                        <p className=\"\">{task.createdBy.firstName} {task.createdBy.lastName}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"mt-3 w-50 ps-3\">\r\n                    <h3>Comment History</h3>\r\n                    <div className=\"mt-4\">\r\n                        {task.history.length > 0 ?\r\n                            task.history.map((description, i) => {\r\n                                return (\r\n                                    <div key={i}>\r\n                                        <p className=\"mb-0 fw-bold\">{new Date(description.time).toLocaleDateString('en-US')} {new Date(description.time).toLocaleTimeString('en-US', {hour: '2-digit', minute: '2-digit'})}</p>\r\n                                        <p className=\"ps-4 mt-0\">{description.description} - {description.editor}</p>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                            : <p>No history available.</p>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Link to={`/tasks/${task._id}/edit`} className=\"blue-button button\">Edit</Link>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default TaskData;","import React, {useState, useEffect} from 'react';\r\nimport { useParams } from 'react-router';\r\nimport axios from 'axios'\r\nimport TaskData from '../components/TaskData'\r\n\r\nconst ViewTask = () => {\r\n    const { id } = useParams();\r\n    const [task, setTask] = useState({})\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    // useEffect to get the task data that needs to be passed down to the child component which will only be displayed after the useEffect is successfully run.\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8000/api/tasks/${id}`)\r\n            .then(res => {\r\n                setTask(res.data[0])\r\n                setLoaded(true)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n    return (\r\n        <div className=\"container w-50\">\r\n            {loaded && <TaskData task={task}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ViewTask;","import './App.css';\nimport Nav from './components/Nav';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom'\nimport AllTasks from './views/AllTasks';\nimport Admin from './views/Admin';\nimport Login from './components/Login';\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport CreateTask from './views/CreateTask';\nimport EditTask from './views/EditTask';\nimport ViewTask from './views/ViewTask';\n\nfunction App() {\n  const [loggedInUser, setLoggedInUser] = useState({})\n  const [toggleUpdate, setToggleUpdate] = useState(false)\n  const [users, setUsers] = useState([])\n\n  // Arrays created on the top level to be passed anywhere they are needed, that way it only needs to be changed in one spot.\n  const departments = [\"Accounting\", \"Marketing\", \"Operations\", \"Sales\"]\n  const status = [\"In Progress\", \"Completed\"]\n  const priorities = [\"Low\", \"Medium\", \"High\", \"Urgent\"]\n\n  // useEffect to set the logged in user, which will be passed anywhere it is needed so this call doesn't need to be made multiple times.\n  useEffect(() => {\n    axios.get('http://localhost:8000/api/users/loggedInUser', { withCredentials: true })\n      .then(res => setLoggedInUser(res.data))\n      .catch(err => console.log(err))\n  }, [toggleUpdate])\n\n\n  // Second useEffect to get a list of all users. This list is used in a few places, so it makes sense to have it on the top level instead of making the call on other components.\n  useEffect(() => {\n    axios.get('http://localhost:8000/api/users')\n      .then(res => {\n        setUsers([...res.data].sort((a, b) => a.firstName > b.firstName ? 1 : -1))\n      })\n      .catch(err => console.log(err))\n  }, [loggedInUser])\n\nreturn (\n  <div className=\"App pt-3\">\n    <div>\n      <BrowserRouter>\n        <Nav toggleUpdate={toggleUpdate} setToggleUpdate={setToggleUpdate} loggedInUser={loggedInUser} setLoggedInUser={setLoggedInUser} />\n        <div className=\"card mt-3 p-4\">\n          <Switch>\n\n            <Route exact path=\"/\">\n              <Login toggleUpdate={toggleUpdate} setToggleUpdate={setToggleUpdate} />\n            </Route>\n\n            <Route exact path=\"/home\">\n              {/* Requires a user to be logged in to navigate to any of the below pages. */}\n              {loggedInUser._id ? <AllTasks priorities={priorities} status={status} users={users} loggedInUser={loggedInUser} /> : <Link className=\"text-center\" to=\"/\">Please login to continue.</Link>}\n            </Route>\n\n            <Route exact path=\"/tasks/new\">\n              {loggedInUser._id ? <CreateTask priorities={priorities} status={status} users={users} loggedInUser={loggedInUser} /> : <Link className=\"text-center\" to=\"/\">Please login to continue.</Link>}\n            </Route>\n\n            <Route exact path=\"/tasks/:id/edit\">\n              {loggedInUser._id ? <EditTask priorities={priorities} status={status} users={users} loggedInUser={loggedInUser} /> : <Link className=\"text-center\" to=\"/\">Please login to continue.</Link>}\n            </Route>\n\n            <Route exact path=\"/tasks/:id\">\n              {loggedInUser._id ? <ViewTask loggedInUser={loggedInUser} /> : <Link className=\"text-center\" to=\"/\">Please login to continue.</Link>}\n            </Route>\n\n            {/* Requires a user to be an admin to navigate to this page. */}\n            <Route path=\"/admin\">\n              {loggedInUser.admin ? <Admin departments={departments} toggleUpdate={toggleUpdate} setToggleUpdate={setToggleUpdate} /> : <h4 className=\"text-center\">Must be an admin to access this page.</h4>}\n            </Route>\n\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </div>\n  </div>\n);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}